// generated by CommonLibrary.cmake, do not edit.

/**
 * @file include/mb/version.h
 * Defines version macros and class for library mb.
 */

#ifndef MB_VERSION_H
#define MB_VERSION_H

#include <mb/api.h>
#include <string>

namespace mb
{
    /** The current major version. */
#   define MB_VERSION_MAJOR 1

    /** The current minor version. */
#   define MB_VERSION_MINOR 9

    /** The current patch level. */
#   define MB_VERSION_PATCH 2

    /** The current SCM revision. */
#   define MB_VERSION_REVISION 0x99c4a10

    /** The current binary interface. */
#   define MB_VERSION_ABI 1

/** True if the current version is newer than the given one. */
#   define MB_VERSION_GT( MAJOR, MINOR, PATCH )       \
    ( (MB_VERSION_MAJOR>MAJOR) ||                     \
      (MB_VERSION_MAJOR==MAJOR && (MB_VERSION_MINOR>MINOR || \
          (MB_VERSION_MINOR==MINOR && MB_VERSION_PATCH>PATCH))))

/** True if the current version is equal or newer to the given. */
#   define MB_VERSION_GE( MAJOR, MINOR, PATCH )       \
    ( (MB_VERSION_MAJOR>MAJOR) ||                     \
      (MB_VERSION_MAJOR==MAJOR && (MB_VERSION_MINOR>MINOR || \
          (MB_VERSION_MINOR==MINOR && MB_VERSION_PATCH>=PATCH))))

/** True if the current version is older than the given one. */
#   define MB_VERSION_LT( MAJOR, MINOR, PATCH )       \
    ( (MB_VERSION_MAJOR<MAJOR) ||                     \
      (MB_VERSION_MAJOR==MAJOR && (MB_VERSION_MINOR<MINOR || \
          (MB_VERSION_MINOR==MINOR && MB_VERSION_PATCH<PATCH))))

/** True if the current version is older or equal to the given. */
#   define MB_VERSION_LE( MAJOR, MINOR, PATCH )       \
    ( (MB_VERSION_MAJOR<MAJOR) ||                     \
      (MB_VERSION_MAJOR==MAJOR && (MB_VERSION_MINOR<MINOR || \
        (MB_VERSION_MINOR==MINOR && MB_VERSION_PATCH<=PATCH))))

/** Information about the current mb version. */
class MB_API Version
{
public:
    /** @return the current major version of mb. */
    static int getMajor();

    /** @return the current minor version of mb. */
    static int getMinor();

    /** @return the current patch level of mb. */
    static int getPatch();

    /** @return the current mb version (MM.mm.pp). */
    static std::string getString();

    /** @return the SCM revision. */
    static int getRevision();

    /** @return the current binary interface version of mb. */
    static int getABI();

    /** @return the current mb version plus the git SHA hash (MM.mm.pp.rev). */
    static std::string getRevString();

    /**
     * Runtime check for ABI compatibility.
     *
     * Call from code using mb. Will fail if the executable
     * was compiled against a version incompatible with the runtime version.
     *
     * @return true if the link-time and compile-time DSO are compatible.
     */
    static bool check()
    {
        return getMajor()==MB_VERSION_MAJOR &&
               getMinor()==MB_VERSION_MINOR;
    }
};

}

#endif
